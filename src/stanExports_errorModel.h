// Generated by rstantools.  Do not edit by hand.

/*
    deconR is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    deconR is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with deconR.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.19.1

#include <stan/model/model_header.hpp>

namespace model_errorModel_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

static int current_statement_begin__;

stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_errorModel");
    reader.add_event(91, 89, "end", "model_errorModel");
    return reader;
}

#include <stan_meta_header.hpp>
 class model_errorModel : public prob_grad {
private:
        int n;
        vector_d genotype;
        vector_d y;
        vector_d measProp2;
        vector_d sd2;
public:
    model_errorModel(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }

    model_errorModel(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }

    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;

        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning

        current_statement_begin__ = -1;

        static const char* function__ = "model_errorModel_namespace::model_errorModel";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        try {
            // initialize data block variables from context__
            current_statement_begin__ = 14;
            context__.validate_dims("data initialization", "n", "int", context__.to_vec());
            n = int(0);
            vals_i__ = context__.vals_i("n");
            pos__ = 0;
            n = vals_i__[pos__++];
            check_greater_or_equal(function__, "n", n, 1);

            current_statement_begin__ = 16;
            validate_non_negative_index("genotype", "n", n);
            context__.validate_dims("data initialization", "genotype", "vector_d", context__.to_vec(n));
            genotype = Eigen::Matrix<double, Eigen::Dynamic, 1>(n);
            vals_r__ = context__.vals_r("genotype");
            pos__ = 0;
            size_t genotype_j_1_max__ = n;
            for (size_t j_1__ = 0; j_1__ < genotype_j_1_max__; ++j_1__) {
                genotype(j_1__) = vals_r__[pos__++];
            }

            current_statement_begin__ = 17;
            validate_non_negative_index("y", "n", n);
            context__.validate_dims("data initialization", "y", "vector_d", context__.to_vec(n));
            y = Eigen::Matrix<double, Eigen::Dynamic, 1>(n);
            vals_r__ = context__.vals_r("y");
            pos__ = 0;
            size_t y_j_1_max__ = n;
            for (size_t j_1__ = 0; j_1__ < y_j_1_max__; ++j_1__) {
                y(j_1__) = vals_r__[pos__++];
            }

            current_statement_begin__ = 19;
            validate_non_negative_index("measProp2", "n", n);
            context__.validate_dims("data initialization", "measProp2", "vector_d", context__.to_vec(n));
            measProp2 = Eigen::Matrix<double, Eigen::Dynamic, 1>(n);
            vals_r__ = context__.vals_r("measProp2");
            pos__ = 0;
            size_t measProp2_j_1_max__ = n;
            for (size_t j_1__ = 0; j_1__ < measProp2_j_1_max__; ++j_1__) {
                measProp2(j_1__) = vals_r__[pos__++];
            }

            current_statement_begin__ = 20;
            validate_non_negative_index("sd2", "n", n);
            context__.validate_dims("data initialization", "sd2", "vector_d", context__.to_vec(n));
            sd2 = Eigen::Matrix<double, Eigen::Dynamic, 1>(n);
            vals_r__ = context__.vals_r("sd2");
            pos__ = 0;
            size_t sd2_j_1_max__ = n;
            for (size_t j_1__ = 0; j_1__ < sd2_j_1_max__; ++j_1__) {
                sd2(j_1__) = vals_r__[pos__++];
            }


            // initialize transformed data variables
            // execute transformed data statements

            // validate transformed data

            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 27;
            num_params_r__ += 1;
            current_statement_begin__ = 30;
            num_params_r__ += 1;
            current_statement_begin__ = 31;
            num_params_r__ += 1;
            current_statement_begin__ = 32;
            num_params_r__ += 1;
            current_statement_begin__ = 36;
            num_params_r__ += 1;
            current_statement_begin__ = 37;
            num_params_r__ += 1;
            current_statement_begin__ = 40;
            validate_non_negative_index("trueProp2", "n", n);
            num_params_r__ += n;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    ~model_errorModel() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        current_statement_begin__ = 27;
        if (!(context__.contains_r("beta0")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable beta0 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("beta0");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "beta0", "double", context__.to_vec());
        double beta0(0);
        beta0 = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(beta0);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable beta0: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 30;
        if (!(context__.contains_r("beta1")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable beta1 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("beta1");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "beta1", "double", context__.to_vec());
        double beta1(0);
        beta1 = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(beta1);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable beta1: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 31;
        if (!(context__.contains_r("beta2")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable beta2 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("beta2");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "beta2", "double", context__.to_vec());
        double beta2(0);
        beta2 = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(beta2);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable beta2: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 32;
        if (!(context__.contains_r("beta3")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable beta3 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("beta3");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "beta3", "double", context__.to_vec());
        double beta3(0);
        beta3 = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(beta3);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable beta3: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 36;
        if (!(context__.contains_r("prec1")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable prec1 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("prec1");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "prec1", "double", context__.to_vec());
        double prec1(0);
        prec1 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, prec1);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable prec1: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 37;
        if (!(context__.contains_r("prec2")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable prec2 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("prec2");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "prec2", "double", context__.to_vec());
        double prec2(0);
        prec2 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, prec2);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable prec2: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 40;
        if (!(context__.contains_r("trueProp2")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable trueProp2 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("trueProp2");
        pos__ = 0U;
        validate_non_negative_index("trueProp2", "n", n);
        context__.validate_dims("parameter initialization", "trueProp2", "vector_d", context__.to_vec(n));
        Eigen::Matrix<double, Eigen::Dynamic, 1> trueProp2(n);
        size_t trueProp2_j_1_max__ = n;
        for (size_t j_1__ = 0; j_1__ < trueProp2_j_1_max__; ++j_1__) {
            trueProp2(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(trueProp2);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable trueProp2: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        typedef T__ local_scalar_t__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);

            // model parameters
            current_statement_begin__ = 27;
            local_scalar_t__ beta0;
            (void) beta0;  // dummy to suppress unused var warning
            if (jacobian__)
                beta0 = in__.scalar_constrain(lp__);
            else
                beta0 = in__.scalar_constrain();

            current_statement_begin__ = 30;
            local_scalar_t__ beta1;
            (void) beta1;  // dummy to suppress unused var warning
            if (jacobian__)
                beta1 = in__.scalar_constrain(lp__);
            else
                beta1 = in__.scalar_constrain();

            current_statement_begin__ = 31;
            local_scalar_t__ beta2;
            (void) beta2;  // dummy to suppress unused var warning
            if (jacobian__)
                beta2 = in__.scalar_constrain(lp__);
            else
                beta2 = in__.scalar_constrain();

            current_statement_begin__ = 32;
            local_scalar_t__ beta3;
            (void) beta3;  // dummy to suppress unused var warning
            if (jacobian__)
                beta3 = in__.scalar_constrain(lp__);
            else
                beta3 = in__.scalar_constrain();

            current_statement_begin__ = 36;
            local_scalar_t__ prec1;
            (void) prec1;  // dummy to suppress unused var warning
            if (jacobian__)
                prec1 = in__.scalar_lb_constrain(0, lp__);
            else
                prec1 = in__.scalar_lb_constrain(0);

            current_statement_begin__ = 37;
            local_scalar_t__ prec2;
            (void) prec2;  // dummy to suppress unused var warning
            if (jacobian__)
                prec2 = in__.scalar_lb_constrain(0, lp__);
            else
                prec2 = in__.scalar_lb_constrain(0);

            current_statement_begin__ = 40;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> trueProp2;
            (void) trueProp2;  // dummy to suppress unused var warning
            if (jacobian__)
                trueProp2 = in__.vector_constrain(n, lp__);
            else
                trueProp2 = in__.vector_constrain(n);

            // transformed parameters
            current_statement_begin__ = 47;
            local_scalar_t__ sigma1;
            (void) sigma1;  // dummy to suppress unused var warning
            stan::math::initialize(sigma1, DUMMY_VAR__);
            stan::math::fill(sigma1, DUMMY_VAR__);

            current_statement_begin__ = 48;
            local_scalar_t__ sigma2;
            (void) sigma2;  // dummy to suppress unused var warning
            stan::math::initialize(sigma2, DUMMY_VAR__);
            stan::math::fill(sigma2, DUMMY_VAR__);

            current_statement_begin__ = 51;
            local_scalar_t__ betaNormal;
            (void) betaNormal;  // dummy to suppress unused var warning
            stan::math::initialize(betaNormal, DUMMY_VAR__);
            stan::math::fill(betaNormal, DUMMY_VAR__);

            // transformed parameters block statements
            current_statement_begin__ = 52;
            stan::math::assign(betaNormal, (beta1 + beta3));
            current_statement_begin__ = 55;
            stan::math::assign(sigma1, stan::math::sqrt((1 / prec1)));
            current_statement_begin__ = 56;
            stan::math::assign(sigma2, stan::math::sqrt((1 / prec2)));

            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning

            current_statement_begin__ = 47;
            if (stan::math::is_uninitialized(sigma1)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: sigma1";
                stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable sigma1: ") + msg__.str()), current_statement_begin__, prog_reader__());
            }
            current_statement_begin__ = 48;
            if (stan::math::is_uninitialized(sigma2)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: sigma2";
                stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable sigma2: ") + msg__.str()), current_statement_begin__, prog_reader__());
            }
            current_statement_begin__ = 51;
            if (stan::math::is_uninitialized(betaNormal)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: betaNormal";
                stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable betaNormal: ") + msg__.str()), current_statement_begin__, prog_reader__());
            }

            // model body

            current_statement_begin__ = 65;
            lp_accum__.add(normal_log<propto__>(beta0, 0.0, 10));
            current_statement_begin__ = 66;
            lp_accum__.add(normal_log<propto__>(beta1, 0.0, 10));
            current_statement_begin__ = 67;
            lp_accum__.add(normal_log<propto__>(beta2, 0.0, 10));
            current_statement_begin__ = 68;
            lp_accum__.add(normal_log<propto__>(beta3, 0.0, 10));
            current_statement_begin__ = 69;
            lp_accum__.add(gamma_log<propto__>(prec1, (1.0 / 10), (1.0 / 10)));
            current_statement_begin__ = 70;
            lp_accum__.add(gamma_log<propto__>(prec2, (1.0 / 10), (1.0 / 10)));
            current_statement_begin__ = 74;
            lp_accum__.add(normal_log<propto__>(trueProp2, .5, 5));
            current_statement_begin__ = 78;
            lp_accum__.add(normal_log<propto__>(measProp2, trueProp2, sd2));
            current_statement_begin__ = 83;
            for (int i = 1; i <= n; ++i) {

                current_statement_begin__ = 85;
                lp_accum__.add(normal_log<propto__>(get_base1(y, i, "y", 1), (((beta0 + (beta1 * get_base1(genotype, i, "genotype", 1))) + (beta2 * get_base1(trueProp2, i, "trueProp2", 1))) + (beta3 * (get_base1(trueProp2, i, "trueProp2", 1) * get_base1(genotype, i, "genotype", 1)))), stan::math::sqrt(((((1 - (2 * get_base1(trueProp2, i, "trueProp2", 1))) + pow(get_base1(trueProp2, i, "trueProp2", 1), 2)) / prec1) + (pow(get_base1(trueProp2, i, "trueProp2", 1), 2) / prec2)))));
            }

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("beta0");
        names__.push_back("beta1");
        names__.push_back("beta2");
        names__.push_back("beta3");
        names__.push_back("prec1");
        names__.push_back("prec2");
        names__.push_back("trueProp2");
        names__.push_back("sigma1");
        names__.push_back("sigma2");
        names__.push_back("betaNormal");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;

        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_errorModel_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning

        // read-transform, write parameters
        double beta0 = in__.scalar_constrain();
        vars__.push_back(beta0);

        double beta1 = in__.scalar_constrain();
        vars__.push_back(beta1);

        double beta2 = in__.scalar_constrain();
        vars__.push_back(beta2);

        double beta3 = in__.scalar_constrain();
        vars__.push_back(beta3);

        double prec1 = in__.scalar_lb_constrain(0);
        vars__.push_back(prec1);

        double prec2 = in__.scalar_lb_constrain(0);
        vars__.push_back(prec2);

        Eigen::Matrix<double, Eigen::Dynamic, 1> trueProp2 = in__.vector_constrain(n);
        size_t trueProp2_j_1_max__ = n;
        for (size_t j_1__ = 0; j_1__ < trueProp2_j_1_max__; ++j_1__) {
            vars__.push_back(trueProp2(j_1__));
        }

        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        if (!include_tparams__ && !include_gqs__) return;

        try {
            // declare and define transformed parameters
            current_statement_begin__ = 47;
            double sigma1;
            (void) sigma1;  // dummy to suppress unused var warning
            stan::math::initialize(sigma1, DUMMY_VAR__);
            stan::math::fill(sigma1, DUMMY_VAR__);

            current_statement_begin__ = 48;
            double sigma2;
            (void) sigma2;  // dummy to suppress unused var warning
            stan::math::initialize(sigma2, DUMMY_VAR__);
            stan::math::fill(sigma2, DUMMY_VAR__);

            current_statement_begin__ = 51;
            double betaNormal;
            (void) betaNormal;  // dummy to suppress unused var warning
            stan::math::initialize(betaNormal, DUMMY_VAR__);
            stan::math::fill(betaNormal, DUMMY_VAR__);

            // do transformed parameters statements
            current_statement_begin__ = 52;
            stan::math::assign(betaNormal, (beta1 + beta3));
            current_statement_begin__ = 55;
            stan::math::assign(sigma1, stan::math::sqrt((1 / prec1)));
            current_statement_begin__ = 56;
            stan::math::assign(sigma2, stan::math::sqrt((1 / prec2)));

            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning

            // write transformed parameters
            if (include_tparams__) {
                vars__.push_back(sigma1);
                vars__.push_back(sigma2);
                vars__.push_back(betaNormal);
            }
            if (!include_gqs__) return;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    static std::string model_name() {
        return "model_errorModel";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "beta0";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "beta1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "beta2";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "beta3";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "prec1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "prec2";
        param_names__.push_back(param_name_stream__.str());
        size_t trueProp2_j_1_max__ = n;
        for (size_t j_1__ = 0; j_1__ < trueProp2_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "trueProp2" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma1";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma2";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "betaNormal";
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__) return;
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "beta0";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "beta1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "beta2";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "beta3";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "prec1";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "prec2";
        param_names__.push_back(param_name_stream__.str());
        size_t trueProp2_j_1_max__ = n;
        for (size_t j_1__ = 0; j_1__ < trueProp2_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "trueProp2" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma1";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma2";
            param_names__.push_back(param_name_stream__.str());
            param_name_stream__.str(std::string());
            param_name_stream__ << "betaNormal";
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__) return;
    }

}; // model

}  // namespace

typedef model_errorModel_namespace::model_errorModel stan_model;


#endif
